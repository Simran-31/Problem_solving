class MedianFinder {
public:
    priority_queue<int>leftmaxheap;
    priority_queue<int,vector<int>,greater<int>>rightminheap;
    MedianFinder() {
        
    }
    
    void addNum(int num) {
        
        if(leftmaxheap.empty()){
            leftmaxheap.push(num);
        }
        else if(num<leftmaxheap.top()){
            leftmaxheap.push(num);
        }
        else{
            rightminheap.push(num);
        }
        if(leftmaxheap.size()>1+rightminheap.size()){
            int toshift=leftmaxheap.top();
            leftmaxheap.pop();
            rightminheap.push(toshift);
        }
         else if(rightminheap.size()>1+leftmaxheap.size()){
            int toshift=rightminheap.top();
            rightminheap.pop();
            leftmaxheap.push(toshift);
        }
    }
    
    double findMedian() {
        if(leftmaxheap.size()>rightminheap.size()){
            return leftmaxheap.top();
        }
        else if(leftmaxheap.size()<rightminheap.size())
        {
            return rightminheap.top();
        }
        else{//take care of double valuesint by int case
            return (leftmaxheap.top()+rightminheap.top())/2.0;
        }
    }
};
